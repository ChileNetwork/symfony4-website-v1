### Basic Git commands ###
Here is a list of some basic Git commands to get you going with Git.

## Tell Git who you are
Configure the author name and email address to be used with your commits. Note that Git strips some characters (for example trailing periods) from user.name.
	$ git config --global user.name "Sam Smith"
	$ git config --global user.email sam@example.com


## Create a new local repository
	$ git init


## Check out a repository
Create a working copy of a local repository:
	$ git clone /path/to/repository

For a remote server, use:
	$ git clone username@host:/path/to/repository

## Add files.
Add one or more files to staging (index):
	$ git add <filename>
	$ git add * |or| gir add .

## Commit
Commit changes to head (but not yet to the remote repository):
	$ git commit -m "Commit message"
Commit any files you've added with git add, and also commit any files you've changed since then:
	$ git commit -a

## Push
Send changes to the master branch of your remote repository:
	$ git push origin master

## Status
List the files you've changed and those you still need to add or commit:
	$ git status

## Connect to a remote repository
If you haven't connected your local repository to a remote server, add the server to be able to push to it:
	$git remote add origin <server>

	donde <server> es:
		HTTPS - https://github.com/ChileNetwork/test.git
		SSH   - git@github.com:ChileNetwork/test.git

List all currently configured remote repositories:
	$ git remote -v

	muestra: origin	git@github.com:ChileNetwork/symfony4-website-v1.git (fetch)
			 origin	git@github.com:ChileNetwork/symfony4-website-v1.git (push)

## Branches
Create a new branch and switch to it:
	$ git checkout -b <branchname>
Switch from one branch to another:
	$ git checkout <branchname>
List all the branches in your repo, and also tell you what branch you're currently in:
	$ git branch
Crea una nueva branch en tu repositorio local
	$ git branch <nombre_nueva_branch>
Delete the feature branch:
	$ git branch -d <branchname>
Push the branch to your remote repository, so others can use it:
	$ git push origin <branchname>



## Tags
You can use tagging to mark a significant changeset, such as a release:
	$ git tag 1.0.0 <commitID>
CommitId is the leading characters of the changeset ID, up to 10, but must be unique. Get the ID using:
	$ git log

Push all tags to remote repository:
	$ git push --tags origin


# Undo local changes
If you mess up, you can replace the changes in your working tree with the last content in head:
Changes already added to the index, as well as new files, will be kept.
	$ git checkout -- <filename>

Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this:
	$ git fetch origin
	$ git reset --hard origin/master








